---
- hosts: all
  gather_facts: yes
  become: yes

  vars:
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    # --- Start of unattended-upgrades management ---
    - name: Check if unattended-upgrades service exists
      ansible.builtin.stat:
        # Changed path to the more common location for systemd service files
        path: /lib/systemd/system/unattended-upgrades.service
      register: unattended_upgrades_service_file

    - name: Stop and disable unattended-upgrades temporarily if it exists
      ansible.builtin.systemd:
        name: unattended-upgrades
        state: stopped
        enabled: false
      when: unattended_upgrades_service_file.stat.exists
      ignore_errors: yes

    # --- End of unattended-upgrades management ---

    - name: Ensure Python dependencies are installed and apt cache is updated
      ansible.builtin.apt:
        name: python3-pip
        state: present
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required Python libraries (via apt)
      ansible.builtin.apt:
        name: python3-six
        state: present
      ignore_errors: yes

    - name: Upgrade all apt packages
      ansible.builtin.apt:
        state: latest
        force_apt_get: yes

    - name: Perform a dist-upgrade
      ansible.builtin.apt:
        upgrade: dist

    - name: Check if a reboot is needed for Debian and Ubuntu boxes
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: Reboot the Debian or Ubuntu server
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible due to kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists

    - name: Remove dependencies that are no longer required
      ansible.builtin.apt:
        autoremove: yes
        autoclean: yes

    # --- Re-enable unattended-upgrades after all apt operations ---
    - name: Re-enable unattended-upgrades if it existed
      ansible.builtin.systemd:
        name: unattended-upgrades
        state: started
        enabled: true
      when: unattended_upgrades_service_file.stat.exists
      ignore_errors: yes
    # --- End of unattended-upgrades re-enablement ---
