---
- hosts: all
  gather_facts: yes
  become: yes
  vars:
    # Explicitly set Python interpreter. This is crucial for Ansible to know
    # which Python to use on the remote host.
    ansible_python_interpreter: /usr/bin/python3
    # Specify a well-known, writeable temporary directory for Ansible's operations
    # This helps if there are subtle permission issues with default temp locations.
    ansible_remote_tmp: /tmp/.ansible_tmp
    # Define Portainer container details as variables for easier modification
    portainer_container_name: portainer
    portainer_image: portainer/portainer-ce:latest
    portainer_ports:
      - "8000:8000"
      - "9443:9443"
    portainer_volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/data" # Re-uses the named volume
    portainer_restart_policy: always

  tasks:
    - name: Stop Portainer container if running
      community.docker.docker_container:
        name: "{{ portainer_container_name }}"
        state: stopped
      ignore_errors: true # Continue even if container isn't running or already stopped

    - name: Remove Portainer container if it exists
      community.docker.docker_container:
        name: "{{ portainer_container_name }}"
        state: absent
      ignore_errors: true # Continue even if container doesn't exist

    - name: Pull newest Portainer image
      community.docker.docker_image:
        name: "{{ portainer_image }}"
        pull: yes
        source: pull

    - name: Run Portainer container
      community.docker.docker_container:
        name: "{{ portainer_container_name }}"
        image: "{{ portainer_image }}"
        ports: "{{ portainer_ports }}"
        volumes: "{{ portainer_volumes }}"
        restart_policy: "{{ portainer_restart_policy }}"
        state: started
        recreate: yes # Ensures container is recreated if config changes

    - name: Display Portainer container info (optional)
      community.docker.docker_container_info:
        name: "{{ portainer_container_name }}"
      register: portainer_info
      # Only run if the container exists
      when: portainer_info.exists is defined and portainer_info.exists

    - name: Print Portainer container status (optional)
      ansible.builtin.debug:
        msg: "Portainer container status: {{ portainer_info.container.State.Status }}"
      # Only run if info was gathered and status is available
      when: portainer_info.exists is defined and portainer_info.exists and portainer_info.container.State.Status is defined
